} else{
b <- b+1
}
if(b==4){
B <- 1
b <- 0
}
}
g; B
#Menggunakan function sebelumnya
n <- 28
gb <- FlipCoin(n)
gb
g = 0; b=0; B=0
for(i in 1:n){
if(gb[i] == 1){
g <- g+1
b <- 0
} else{
b <- b+1
}
if(b==4){
B <- 1
b <- 0
}
}
g; B
#Menggunakan function sebelumnya
n <- 28
gb <- FlipCoin(n)
gb
g = 0; b=0; B=0
for(i in 1:n){
if(gb[i] == 1){
g <- g+1
b <- 0
} else{
b <- b+1
}
if(b==4){
B <- 1
b <- 0
}
}
g; B
#Menggunakan function sebelumnya
n <- 28
gb <- FlipCoin(n)
gb
g = 0; b=0; B=0
for(i in 1:n){
if(gb[i] == 1){
g <- g+1
b <- 0
} else{
b <- b+1
}
if(b==4){
B <- 1
b <- 0
}
}
g; B
#Menggunakan function sebelumnya
n <- 28
gb <- FlipCoin(n)
gb
g = 0; b=0; B=0
for(i in 1:n){
if(gb[i] == 1){
g <- g+1
b <- 0
} else{
b <- b+1
}
if(b==4){
B <- 1
b <- 0
}
}
g; B
#Menggunakan function sebelumnya
n <- 28
gb <- FlipCoin(n)
gb
g = 0; b=0; B=0
for(i in 1:n){
if(gb[i] == 1){
g <- g+1
b <- 0
} else{
b <- b+1
}
if(b==4){
B <- 1
b <- 0
}
}
g; B
#Menggunakan function sebelumnya
n <- 28
gb <- FlipCoin(n)
gb
g = 0; b=0; B=0
for(i in 1:n){
if(gb[i] == 1){
g <- g+1
b <- 0
} else{
b <- b+1
}
if(b==4){
B <- 1
b <- 0
}
}
g; B
#Menggunakan function sebelumnya
n <- 28
gb <- FlipCoin(n)
gb
g = 0; b=0; B=0
for(i in 1:n){
if(gb[i] == 1){
g <- g+1
b <- 0
} else{
b <- b+1
}
if(b==4){
B <- 1
b <- 0
}
}
g; B
#Menggunakan function sebelumnya
n <- 28
gb <- FlipCoin(n)
gb
g = 0; b=0; B=0
for(i in 1:n){
if(gb[i] == 1){
g <- g+1
b <- 0
} else{
b <- b+1
}
if(b==4){
B <- 1
b <- 0
}
}
g; B
b
#Menggunakan function sebelumnya
n <- 28
gb <- FlipCoin(n)
gb
g = 0; b=0; B=0
for(i in 1:n){
if(gb[i] == 1){
g <- g+1
b <- 0
} else{
b <- b+1
}
if(b==4){
B <- B+1
b <- 0
}
}
g; B
#Menggunakan function sebelumnya
n <- 28
gb <- FlipCoin(n)
gb
g = 0; b=0; B=0
for(i in 1:n){
if(gb[i] == 1){
g <- g+1
b <- 0
} else{
b <- b+1
}
if(b==4){
B <- B+1
b <- 0
}
}
g; B
#Menggunakan function sebelumnya
n <- 28
gb <- FlipCoin(n)
gb
g = 0; b=0; B=0
for(i in 1:n){
if(gb[i] == 1){
g <- g+1
b <- 0
} else{
b <- b+1
}
if(b==4){
B <- B+1
b <- 0
}
}
g; B
#Menggunakan function sebelumnya
n <- 28
gb <- FlipCoin(n)
gb
g = 0; b=0; B=0
for(i in 1:n){
if(gb[i] == 1){
g <- g+1
b <- 0
} else{
b <- b+1
}
if(b==4){
B <- B+1
b <- 0
}
}
g; B
#Menggunakan function sebelumnya
n <- 28
gb <- FlipCoin(n)
gb
g = 0; b=0; B=0
for(i in 1:n){
if(gb[i] == 1){
g <- g+1
b <- 0
} else{
b <- b+1
}
if(b==4){
B <- B+1
b <- 0
}
}
g; B
#Menggunakan function sebelumnya
n <- 28
gb <- FlipCoin(n)
gb
g = 0; b=0; B=0
for(i in 1:n){
if(gb[i] == 1){
g <- g+1
b <- 0
} else{
b <- b+1
}
if(b==4){
B <- B+1
b <- 0
}
}
g; B
#Menggunakan function sebelumnya
n <- 28
gb <- FlipCoin(n)
gb
g = 0; b=0; B=0
for(i in 1:n){
if(gb[i] == 1){
g <- g+1
b <- 0
} else{
b <- b+1
}
if(b==4){
B <- B+1
b <- 0
}
}
g; B
#Menggunakan function sebelumnya
n <- 28
gb <- FlipCoin(n)
gb
g = 0; b=0; B=0
for(i in 1:n){
if(gb[i] == 1){
g <- g+1
b <- 0
} else{
b <- b+1
}
if(b==4){
B <- B+1
b <- 0
}
}
g; B
#Menggunakan function sebelumnya
n <- 28
gb <- FlipCoin(n)
gb
g = 0; b=0; B=0
for(i in 1:n){
if(gb[i] == 1){
g <- g+1
b <- 0
} else{
b <- b+1
}
if(b==4){
B <- B+1
b <- 0
}
}
g; B
#Menggunakan function sebelumnya
n <- 28
gb <- FlipCoin(n)
gb
g = 0; b=0; B=0
for(i in 1:n){
if(gb[i] == 1){
g <- g+1
b <- 0
} else{
b <- b+1
}
if(b==4){
B <- B+1
b <- 0
}
}
g; B
#Menggunakan function sebelumnya
n <- 28
gb <- FlipCoin(n)
gb
g = 0; b=0; B=0
for(i in 1:n){
if(gb[i] == 1){
g <- g+1
b <- 0
} else{
b <- b+1
}
if(b==4){
B <- B+1
b <- 0
}
}
g; B
#Menggunakan function sebelumnya
n <- 28
gb <- FlipCoin(n)
gb
g = 0; b=0; B=0
for(i in 1:n){
if(gb[i] == 1){
g <- g+1
b <- 0
} else{
b <- b+1
}
if(b==4){
B <- B+1
b <- 0
}
}
g; B
g <- cumsum(gb)
g <- g - c(0, g[gb == 1]
)
g <- cumsum(gb)
g <- g - c(0, g[gb == 1])
gb
g
#Menggunakan function sebelumnya
n <- 28
gb <- FlipCoin(n)
gb
g = 0; b=0; B=0
for(i in 1:n){
if(gb[i] == 1){
g <- g+1
b <- 0
} else{
b <- b+1
}
if(b==4){
B <- B+1
b <- 0
}
}
cat("Banyaknya anak perempuan :", g,
"\nBanyaknya 4 anak tanpa perempuan :", B,
"\nPeluangnya :", (g+B)/g)
#Menggunakan function sebelumnya
n <- 28
gb <- FlipCoin(n)
gb
g = 0; b=0; B=0
for(i in 1:n){
if(gb[i] == 1){
g <- g+1
b <- 0
} else{
b <- b+1
}
if(b==4){
B <- B+1
b <- 0
}
}
cat("Banyaknya anak perempuan :", g,
"\nBanyaknya 4 anak tanpa perempuan :", B,
"\nPeluangnya :", g/(g+B))
#Menggunakan function sebelumnya
n <- 28
gb <- FlipCoin(n)
gb
g = 0; b=0; B=0
for(i in 1:n){
if(gb[i] == 1){
g <- g+1
b <- 0
} else{
b <- b+1
}
if(b==4){
B <- B+1
b <- 0
}
}
cat("Banyaknya anak perempuan :", g,
"\nBanyaknya 4 anak tanpa perempuan :", B,
"\nPeluangnya :", g/(g+B))
n <- 100
e2 <- FlipCoin(n)
cat("Banyaknya tail :", sum(e2==0), "dan Frekuensi Relatifnya :", sum(e2==0)/n,
"\nBanyaknya head :", sum(e2==1), "dan Frekuensi Relatifnya :", sum(e2==1)/n)
RollDie <- function(n) sample(1:6, rep=T)
n <- 50
d1 <- RollDie(n)
d1
RollDie <- function(n) sample(1:6, n, rep=T)
n <- 50
d1 <- RollDie(n)
d1
cat("Banyaknya tail :", sum(d1==0), "dan Frekuensi Relatifnya :", sum(d1==0)/n,
"\nBanyaknya head :", sum(d1==1), "dan Frekuensi Relatifnya :", sum(d1==1)/n)
cat("Banyaknya tail :", sum(d1==3), "dan Frekuensi Relatifnya :", sum(d1==3)/n)
rolls.200 <- NA
for(i in 1:6) rolls.200 = c(rolls.200, sum(d2==i)/n)
n <- 200
d2 <- RollDie(n)
rolls.200 <- NA
for(i in 1:6) rolls.200 = c(rolls.200, sum(d2==i)/n)
rolls.200
rolls.200 <- numeric(0)
for(i in 1:6) rolls.200 = c(rolls.200, sum(d2==i)/n)
rolls.200
Dice <- function(n){
d <- RollDie(n)
rolls <- numeric(0)
for(i in 1:6) rolls = c(rolls, sum(d==i)/n)
return(rolls)
}
rolls.200 <- Dice(200)
rolls.200
RollingDice <- data.frame(
rolls.200 = Dice(200),
rolls.1000 = Dice(1000)
)
RollingDice
Dice <- function(n){
d <- RollDie(n)
rolls <- numeric(0)
for(i in 1:6) rolls = c(rolls, sum(d==i)/n)
return(rolls)
}
RollingDice <- data.frame(
`200 rolls` = Dice(200),
`1000 rolls` = Dice(1000)
)
RollingDice
Dice <- function(n){
d <- RollDie(n)
rolls <- numeric(0)
for(i in 1:6) rolls = c(rolls, sum(d==i)/n)
return(rolls)
}
RollingDice <- data.frame(
rolls.200 = Dice(200),
rolls.1000 = Dice(1000)
)
RollingDice
paste0("RF.", 1:6)
Dice <- function(n){
d <- RollDie(n)
rolls <- numeric(0)
for(i in 1:6) rolls = c(rolls, sum(d==i)/n)
return(rolls)
}
RollingDice <- data.frame(
rolls.200 = Dice(200),
rolls.1000 = Dice(1000)
)
rownames(RollingDice) <- paste0("RF.", 1:6)
RollingDice
print(RollingDice)
print(RollingDice)
