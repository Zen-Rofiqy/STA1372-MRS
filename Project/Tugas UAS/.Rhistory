set.seed(361)
k <- 10000; n <- seq(5,50)
mix_data_1 <- lapply(n, function(n)
rbind(matrix(rnorm(n*k/2, mean = 0, sd = 1), k/2),
matrix(rchisq(n *k /2, df =1), k /2)) )
hist(mix_data_1[[1]], main = "Sebaran Populasi Campuran 1",
xlab = "Nilai", ylab = "Frekuensi", col = "#792b9a")
hist(mix_data_1[[2]], main = "Sebaran Populasi Campuran 1",
xlab = "Nilai", ylab = "Frekuensi", col = "#792b9a")
hist(mix_data_1[[3]], main = "Sebaran Populasi Campuran 1",
xlab = "Nilai", ylab = "Frekuensi", col = "#792b9a")
set.seed(361)
k <- 1000; n <- 1
mix_data_2 <- rbind(matrix(rchisq(n*k/2, df = 1), k/2),
matrix(rchisq(n*k/2, df = 3), k/2))
hist(mix_data_2, main = "Sebaran Populasi Campuran 2",
xlab = "Nilai", ylab = "Frekuensi", col = "#96336c")
set.seed(361)
k <- 10000; n <- seq(5,50)
mix_data_1 <- lapply(n, function(n)
rbind(matrix(rnorm(n*k/2, mean = 0, sd = 1), k/2),
matrix(rchisq(n *k /2, df =1), k /2)) )
hist(mix_data_1[[1]], main = "Sebaran Populasi Campuran 1",
xlab = "Nilai", ylab = "Frekuensi", col = "#792b9a")
hist(mix_data_1[[2]], main = "Sebaran Populasi Campuran 1",
xlab = "Nilai", ylab = "Frekuensi", col = "#792b9a")
hist(mix_data_1[[3]], main = "Sebaran Populasi Campuran 1",
xlab = "Nilai", ylab = "Frekuensi", col = "#792b9a")
t_test_pvalue <- function(x, alt="two.sided", mu = mean(mix_data_1[[1]] ) ){
t.test(x, alternative = alt, mu = mu)$p.value
}
wilcox_test_pvalue <- function(x,alt="two.sided",mu = mean(mix_data_1[[1]] ) ){
wilcox.test(x, alternative = alt, mu = mu)$p.value
}
# membuat objek data.frame dummy untuk menyimpan hasil simulasi
result_sim1 <- data.frame(n=0, alpha_empiris=0, test_name="")
set.seed(2020)
# iterasi simulasi berdasarkan ukuran sampel
for(i in seq_along(n)){
# menghitung p value uji t dari 10rb data hasil bangkitan
t_test_res <- apply(mix_data_1[[i]], 1, t_test_pvalue)
# menghitung p value uji wilcoxon dari 10rb data hasil bangkitan
wilcox_test_res <- apply(mix_data_1[[i]], 1, wilcox_test_pvalue)
# menghitung alpha empiris dari uji t
t_p_value_sim <- mean(t_test_res < alpha)
# menghitung alpha empiris dari uji wilcoxon
wilcox_p_value_sim <- mean(wilcox_test_res < alpha)
# menyimpan hasil simulasi
result_sim1 <- rbind(result_sim1, list(n[i], t_p_value_sim, "t_test"),
list(n[i], wilcox_p_value_sim, "wilcox_test")
)
}
# mendefinisikan alpha
alpha <- 0.05
# membuat objek data.frame dummy untuk menyimpan hasil simulasi
result_sim1 <- data.frame(n=0, alpha_empiris=0, test_name="")
set.seed(2020)
# iterasi simulasi berdasarkan ukuran sampel
for(i in seq_along(n)){
# menghitung p value uji t dari 10rb data hasil bangkitan
t_test_res <- apply(mix_data_1[[i]], 1, t_test_pvalue)
# menghitung p value uji wilcoxon dari 10rb data hasil bangkitan
wilcox_test_res <- apply(mix_data_1[[i]], 1, wilcox_test_pvalue)
# menghitung alpha empiris dari uji t
t_p_value_sim <- mean(t_test_res < alpha)
# menghitung alpha empiris dari uji wilcoxon
wilcox_p_value_sim <- mean(wilcox_test_res < alpha)
# menyimpan hasil simulasi
result_sim1 <- rbind(result_sim1, list(n[i], t_p_value_sim, "t_test"),
list(n[i], wilcox_p_value_sim, "wilcox_test")
)
}
# membuang baris dummy
result_sim1 <- result_sim1[-1, ]
# mendefinisikan ukuran sampel dari 5 saampai 50
n <- seq(5,50)
# mendefinisikan miu distribusi normal
mu0 <- 1500
# mendefinisikan sigma distribusi normal
sigma0 <- 200
# mendefinisikan banyaknya ulangan
num_rep <- 10000
# mendefinisikan alpha
alpha <- 0.05
set.seed(361)
k <- 10000; n <- seq(5,50)
mix_data_1 <- lapply(n, function(n)
rbind(matrix(rnorm(n*k/2, mean = 0, sd = 1), k/2),
matrix(rchisq(n *k /2, df =1), k /2)) )
hist(mix_data_1[[1]], main = "Sebaran Populasi Campuran 1",
xlab = "Nilai", ylab = "Frekuensi", col = "#792b9a")
hist(mix_data_1[[2]], main = "Sebaran Populasi Campuran 1",
xlab = "Nilai", ylab = "Frekuensi", col = "#792b9a")
hist(mix_data_1[[3]], main = "Sebaran Populasi Campuran 1",
xlab = "Nilai", ylab = "Frekuensi", col = "#792b9a")
i=1
# membangkitan data berdistribusi normal dengan ulangan 10rb
sim_mc_norm <- replicate(num_rep, rnorm(n[i], mu0, sigma0))
str(sim_mc_norm)
str(mix_data_1)
str(sim_mc_norm)
str(mix_data_1[[1]])
